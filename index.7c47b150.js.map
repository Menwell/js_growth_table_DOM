{"mappings":"ACEA,IAAM,EAAQ,SAAS,aAAa,CAAC,SAC/B,EAAe,SAAS,aAAa,CAAC,eACtC,EAAe,SAAS,aAAa,CAAC,eACtC,EAAkB,SAAS,aAAa,CAAC,kBACzC,EAAkB,SAAS,aAAa,CAAC,kBAOzC,EAAqB,WACzB,IAAM,EAAW,EAAM,IAAI,CAAC,MAAM,CAC5B,EAAW,EAAM,IAAI,CAAC,EAAE,CAAG,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAG,CAE9D,CAAA,EAAa,QAAQ,CAAG,GATV,GAUd,EAAa,QAAQ,CAAG,GATV,EAWd,EAAgB,QAAQ,CAAG,GAVb,GAWd,EAAgB,QAAQ,CAAG,GAVb,CAWhB,EAEA,EAAa,gBAAgB,CAAC,QAAS,WAGrC,GAAI,AAFa,EAAM,IAAI,CAAC,MAAM,CAjBpB,GAmBU,CAGtB,IAAK,IAFC,EAAS,EAAM,SAAS,GAErB,EAAI,EAAG,EAAI,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAE,IAC9C,EAAO,UAAU,CAAC,GAEpB,GACF,CACF,GAEA,EAAa,gBAAgB,CAAC,QAAS,WACjC,EAAM,IAAI,CAAC,MAAM,CA7BP,IA8BZ,EAAM,SAAS,CAAC,IAChB,IAEJ,GAEA,EAAgB,gBAAgB,CAAC,QAAS,WAGxC,GAAI,AAFa,CAAA,EAAM,IAAI,CAAC,EAAE,CAAG,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAG,CAAA,EAnChD,GAqCU,CACjB,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,EAAM,IAAI,CAAA,OAAA,QAAA,CAAA,GAAvB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EACE,AADG,EAAA,KAAA,CACC,UAAU,CAAC,G,C,M,E,CADZ,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAGL,GACF,CACF,GAEA,EAAgB,gBAAgB,CAAC,QAAS,WAGxC,GAAI,AAFa,CAAA,EAAM,IAAI,CAAC,EAAE,CAAG,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAG,CAAA,EA7ChD,EA+CU,CACjB,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,EAAM,IAAI,CAAA,OAAA,QAAA,CAAA,GAAvB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EACE,AADG,EAAA,KAAA,CACC,UAAU,CAAC,G,C,M,E,CADZ,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAGL,GACF,CACF,GAEA","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar table = document.querySelector(\"table\");\nvar appendRowBtn = document.querySelector(\".append-row\");\nvar removeRowBtn = document.querySelector(\".remove-row\");\nvar appendColumnBtn = document.querySelector(\".append-column\");\nvar removeColumnBtn = document.querySelector(\".remove-column\");\nvar maxRows = 10;\nvar minRows = 2;\nvar maxCols = 10;\nvar minCols = 2;\nvar updateButtonsState = function() {\n    var rowCount = table.rows.length;\n    var colCount = table.rows[0] ? table.rows[0].cells.length : 0;\n    appendRowBtn.disabled = rowCount >= maxRows;\n    removeRowBtn.disabled = rowCount <= minRows;\n    appendColumnBtn.disabled = colCount >= maxCols;\n    removeColumnBtn.disabled = colCount <= minCols;\n};\nappendRowBtn.addEventListener(\"click\", function() {\n    var rowCount = table.rows.length;\n    if (rowCount < maxRows) {\n        var newRow = table.insertRow();\n        for(var i = 0; i < table.rows[0].cells.length; i++)newRow.insertCell(i);\n        updateButtonsState();\n    }\n});\nremoveRowBtn.addEventListener(\"click\", function() {\n    if (table.rows.length > minRows) {\n        table.deleteRow(-1);\n        updateButtonsState();\n    }\n});\nappendColumnBtn.addEventListener(\"click\", function() {\n    var colCount = table.rows[0] ? table.rows[0].cells.length : 0;\n    if (colCount < maxCols) {\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        try {\n            for(var _iterator = table.rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                var row = _step.value;\n                row.insertCell(-1);\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n        updateButtonsState();\n    }\n});\nremoveColumnBtn.addEventListener(\"click\", function() {\n    var colCount = table.rows[0] ? table.rows[0].cells.length : 0;\n    if (colCount > minCols) {\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        try {\n            for(var _iterator = table.rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                var row = _step.value;\n                row.deleteCell(-1);\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n        updateButtonsState();\n    }\n});\nupdateButtonsState();\n\n//# sourceMappingURL=index.7c47b150.js.map\n","'use strict';\n\nconst table = document.querySelector('table');\nconst appendRowBtn = document.querySelector('.append-row');\nconst removeRowBtn = document.querySelector('.remove-row');\nconst appendColumnBtn = document.querySelector('.append-column');\nconst removeColumnBtn = document.querySelector('.remove-column');\n\nconst maxRows = 10;\nconst minRows = 2;\nconst maxCols = 10;\nconst minCols = 2;\n\nconst updateButtonsState = () => {\n  const rowCount = table.rows.length;\n  const colCount = table.rows[0] ? table.rows[0].cells.length : 0;\n\n  appendRowBtn.disabled = rowCount >= maxRows;\n  removeRowBtn.disabled = rowCount <= minRows;\n\n  appendColumnBtn.disabled = colCount >= maxCols;\n  removeColumnBtn.disabled = colCount <= minCols;\n};\n\nappendRowBtn.addEventListener('click', () => {\n  const rowCount = table.rows.length;\n\n  if (rowCount < maxRows) {\n    const newRow = table.insertRow();\n\n    for (let i = 0; i < table.rows[0].cells.length; i++) {\n      newRow.insertCell(i);\n    }\n    updateButtonsState();\n  }\n});\n\nremoveRowBtn.addEventListener('click', () => {\n  if (table.rows.length > minRows) {\n    table.deleteRow(-1);\n    updateButtonsState();\n  }\n});\n\nappendColumnBtn.addEventListener('click', () => {\n  const colCount = table.rows[0] ? table.rows[0].cells.length : 0;\n\n  if (colCount < maxCols) {\n    for (const row of table.rows) {\n      row.insertCell(-1);\n    }\n    updateButtonsState();\n  }\n});\n\nremoveColumnBtn.addEventListener('click', () => {\n  const colCount = table.rows[0] ? table.rows[0].cells.length : 0;\n\n  if (colCount > minCols) {\n    for (const row of table.rows) {\n      row.deleteCell(-1);\n    }\n    updateButtonsState();\n  }\n});\n\nupdateButtonsState();\n"],"names":["table","document","querySelector","appendRowBtn","removeRowBtn","appendColumnBtn","removeColumnBtn","updateButtonsState","rowCount","rows","length","colCount","cells","disabled","addEventListener","newRow","insertRow","i","insertCell","deleteRow","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","row","value","err","return","deleteCell"],"version":3,"file":"index.7c47b150.js.map"}